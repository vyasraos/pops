name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Type check
      run: bun run type-check

    - name: Lint
      run: bun run lint

    - name: Run tests
      run: bun test

    - name: Build TypeScript
      run: bun run build

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        bun run dev --help
        bun run dev --version

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.33.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build all binaries
      run: bun run build:binaries-all

    - name: Test binaries
      run: |
        chmod +x dist/pops-*
        ./dist/pops-linux --version
        file dist/pops-*

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          dist/pops-linux
          dist/pops-macos
          dist/pops-windows.exe
        retention-days: 30

  validate-install-script:
    name: Validate Install Script
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: [build-binaries]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: dist/

    - name: Make binaries executable
      run: chmod +x dist/pops-*

    - name: Test install script (dry run)
      run: |
        # Create a mock GitHub release structure
        mkdir -p /tmp/mock-release
        cp dist/pops-* /tmp/mock-release/

        # Test script syntax
        bash -n install.sh

        echo "Install script syntax is valid"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, security, code-quality, build-binaries]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.build-binaries.result == 'success' }}
      run: |
        echo "✅ All CI checks passed!"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build-binaries.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        exit 1