name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build project
      run: bun run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --format=sarif
          --output=osv-results.sarif
          .
      continue-on-error: true

    - name: Upload OSV scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'osv-results.sarif'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Install license checker
      run: bun add --dev license-checker

    - name: Check licenses
      run: |
        echo "Checking licenses for all dependencies..."
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;WTFPL'

    - name: Generate license report
      run: |
        npx license-checker --csv --out licenses.csv
        npx license-checker --json --out licenses.json

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          licenses.csv
          licenses.json

  binary-scan:
    name: Binary Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build binaries
      run: bun run build:binaries-all

    - name: Scan Linux binary
      uses: aquasecurity/trivy-action@master
      with:
        input: 'dist/pops-linux'
        format: 'sarif'
        output: 'binary-linux-results.sarif'

    - name: Upload binary scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'binary-linux-results.sarif'

  sbom-generation:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: |
          *.spdx.json

  security-scorecard:
    name: OSSF Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Run analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true

    - name: Upload to code-scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, license-scan]
    if: always()

    steps:
    - name: Security Check Summary
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.codeql.result }}" == "success" ]]; then
          echo "✅ **CodeQL Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **CodeQL Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ **Dependency Scan**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency Scan**: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
          echo "✅ **Secret Detection**: No secrets detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secret Detection**: Potential secrets found" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.license-scan.result }}" == "success" ]]; then
          echo "✅ **License Compliance**: All licenses approved" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **License Compliance**: License issues found" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY