name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build project
      run: bun run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.33.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1.8.0
      with:
        scan-args: |-
          --recursive
          ./
        results-file-name: 'osv-results.sarif'
        fail-on-vuln: false

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified

  sbom-generation:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: |
          *.spdx.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, sbom-generation]
    if: always()

    steps:
    - name: Security Check Summary
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.codeql.result }}" == "success" ]]; then
          echo "✅ **CodeQL Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **CodeQL Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ **Dependency Scan**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency Scan**: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
          echo "✅ **Secret Detection**: No secrets detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secret Detection**: Potential secrets found" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.sbom-generation.result }}" == "success" ]]; then
          echo "✅ **SBOM Generation**: Software Bill of Materials generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **SBOM Generation**: Failed to generate SBOM" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
